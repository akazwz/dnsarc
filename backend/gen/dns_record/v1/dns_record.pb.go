// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: dns_record/v1/dns_record.proto

package dns_recordv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDNSRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ZoneName      string                 `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Ttl           int32                  `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Weight        int32                  `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDNSRecordRequest) Reset() {
	*x = CreateDNSRecordRequest{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSRecordRequest) ProtoMessage() {}

func (x *CreateDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDNSRecordRequest) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *CreateDNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDNSRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateDNSRecordRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateDNSRecordRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateDNSRecordRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type DNSRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ZoneId        string                 `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ZoneName      string                 `protobuf:"bytes,3,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Content       string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Weight        int32                  `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Ttl           int32                  `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSRecord) Reset() {
	*x = DNSRecord{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSRecord) ProtoMessage() {}

func (x *DNSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSRecord.ProtoReflect.Descriptor instead.
func (*DNSRecord) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{1}
}

func (x *DNSRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DNSRecord) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DNSRecord) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *DNSRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNSRecord) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DNSRecord) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DNSRecord) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DNSRecord) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DNSRecord) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type CreateDNSRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *DNSRecord             `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDNSRecordResponse) Reset() {
	*x = CreateDNSRecordResponse{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSRecordResponse) ProtoMessage() {}

func (x *CreateDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDNSRecordResponse) GetRecord() *DNSRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type ListDNSRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ZoneId        string                 `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDNSRecordsRequest) Reset() {
	*x = ListDNSRecordsRequest{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDNSRecordsRequest) ProtoMessage() {}

func (x *ListDNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListDNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{3}
}

func (x *ListDNSRecordsRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

type ListDNSRecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*DNSRecord           `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDNSRecordsResponse) Reset() {
	*x = ListDNSRecordsResponse{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDNSRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDNSRecordsResponse) ProtoMessage() {}

func (x *ListDNSRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDNSRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListDNSRecordsResponse) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{4}
}

func (x *ListDNSRecordsResponse) GetRecords() []*DNSRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type ListDNSRecordsByZoneNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ZoneName      string                 `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDNSRecordsByZoneNameRequest) Reset() {
	*x = ListDNSRecordsByZoneNameRequest{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDNSRecordsByZoneNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDNSRecordsByZoneNameRequest) ProtoMessage() {}

func (x *ListDNSRecordsByZoneNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDNSRecordsByZoneNameRequest.ProtoReflect.Descriptor instead.
func (*ListDNSRecordsByZoneNameRequest) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{5}
}

func (x *ListDNSRecordsByZoneNameRequest) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

type ListDNSRecordsByZoneNameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*DNSRecord           `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDNSRecordsByZoneNameResponse) Reset() {
	*x = ListDNSRecordsByZoneNameResponse{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDNSRecordsByZoneNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDNSRecordsByZoneNameResponse) ProtoMessage() {}

func (x *ListDNSRecordsByZoneNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDNSRecordsByZoneNameResponse.ProtoReflect.Descriptor instead.
func (*ListDNSRecordsByZoneNameResponse) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{6}
}

func (x *ListDNSRecordsByZoneNameResponse) GetRecords() []*DNSRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetDNSRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDNSRecordRequest) Reset() {
	*x = GetDNSRecordRequest{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDNSRecordRequest) ProtoMessage() {}

func (x *GetDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*GetDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{7}
}

func (x *GetDNSRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDNSRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *DNSRecord             `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDNSRecordResponse) Reset() {
	*x = GetDNSRecordResponse{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDNSRecordResponse) ProtoMessage() {}

func (x *GetDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*GetDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{8}
}

func (x *GetDNSRecordResponse) GetRecord() *DNSRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type UpdateDNSRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Ttl           int32                  `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Weight        int32                  `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDNSRecordRequest) Reset() {
	*x = UpdateDNSRecordRequest{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSRecordRequest) ProtoMessage() {}

func (x *UpdateDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateDNSRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDNSRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateDNSRecordRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateDNSRecordRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *UpdateDNSRecordRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type UpdateDNSRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *DNSRecord             `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDNSRecordResponse) Reset() {
	*x = UpdateDNSRecordResponse{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSRecordResponse) ProtoMessage() {}

func (x *UpdateDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*UpdateDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDNSRecordResponse) GetRecord() *DNSRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type DeleteDNSRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDNSRecordRequest) Reset() {
	*x = DeleteDNSRecordRequest{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSRecordRequest) ProtoMessage() {}

func (x *DeleteDNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDNSRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDNSRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDNSRecordResponse) Reset() {
	*x = DeleteDNSRecordResponse{}
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSRecordResponse) ProtoMessage() {}

func (x *DeleteDNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_record_v1_dns_record_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSRecordResponse.ProtoReflect.Descriptor instead.
func (*DeleteDNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_dns_record_v1_dns_record_proto_rawDescGZIP(), []int{12}
}

var File_dns_record_v1_dns_record_proto protoreflect.FileDescriptor

const file_dns_record_v1_dns_record_proto_rawDesc = "" +
	"\n" +
	"\x1edns_record/v1/dns_record.proto\x12\rdns_record.v1\"\xa1\x01\n" +
	"\x16CreateDNSRecordRequest\x12\x1b\n" +
	"\tzone_name\x18\x01 \x01(\tR\bzoneName\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x10\n" +
	"\x03ttl\x18\x05 \x01(\x05R\x03ttl\x12\x16\n" +
	"\x06weight\x18\x06 \x01(\x05R\x06weight\"\xfb\x01\n" +
	"\tDNSRecord\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\azone_id\x18\x02 \x01(\tR\x06zoneId\x12\x1b\n" +
	"\tzone_name\x18\x03 \x01(\tR\bzoneName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x05 \x01(\tR\x04type\x12\x18\n" +
	"\acontent\x18\x06 \x01(\tR\acontent\x12\x16\n" +
	"\x06weight\x18\a \x01(\x05R\x06weight\x12\x10\n" +
	"\x03ttl\x18\b \x01(\x05R\x03ttl\x12\x1d\n" +
	"\n" +
	"created_at\x18\t \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\tR\tupdatedAt\"K\n" +
	"\x17CreateDNSRecordResponse\x120\n" +
	"\x06record\x18\x01 \x01(\v2\x18.dns_record.v1.DNSRecordR\x06record\"0\n" +
	"\x15ListDNSRecordsRequest\x12\x17\n" +
	"\azone_id\x18\x01 \x01(\tR\x06zoneId\"L\n" +
	"\x16ListDNSRecordsResponse\x122\n" +
	"\arecords\x18\x01 \x03(\v2\x18.dns_record.v1.DNSRecordR\arecords\">\n" +
	"\x1fListDNSRecordsByZoneNameRequest\x12\x1b\n" +
	"\tzone_name\x18\x01 \x01(\tR\bzoneName\"V\n" +
	" ListDNSRecordsByZoneNameResponse\x122\n" +
	"\arecords\x18\x01 \x03(\v2\x18.dns_record.v1.DNSRecordR\arecords\"%\n" +
	"\x13GetDNSRecordRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"H\n" +
	"\x14GetDNSRecordResponse\x120\n" +
	"\x06record\x18\x01 \x01(\v2\x18.dns_record.v1.DNSRecordR\x06record\"\x94\x01\n" +
	"\x16UpdateDNSRecordRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x10\n" +
	"\x03ttl\x18\x05 \x01(\x05R\x03ttl\x12\x16\n" +
	"\x06weight\x18\x06 \x01(\x05R\x06weight\"K\n" +
	"\x17UpdateDNSRecordResponse\x120\n" +
	"\x06record\x18\x01 \x01(\v2\x18.dns_record.v1.DNSRecordR\x06record\"(\n" +
	"\x16DeleteDNSRecordRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x19\n" +
	"\x17DeleteDNSRecordResponse2\xf9\x04\n" +
	"\x10DNSRecordService\x12b\n" +
	"\x0fCreateDNSRecord\x12%.dns_record.v1.CreateDNSRecordRequest\x1a&.dns_record.v1.CreateDNSRecordResponse\"\x00\x12_\n" +
	"\x0eListDNSRecords\x12$.dns_record.v1.ListDNSRecordsRequest\x1a%.dns_record.v1.ListDNSRecordsResponse\"\x00\x12}\n" +
	"\x18ListDNSRecordsByZoneName\x12..dns_record.v1.ListDNSRecordsByZoneNameRequest\x1a/.dns_record.v1.ListDNSRecordsByZoneNameResponse\"\x00\x12Y\n" +
	"\fGetDNSRecord\x12\".dns_record.v1.GetDNSRecordRequest\x1a#.dns_record.v1.GetDNSRecordResponse\"\x00\x12b\n" +
	"\x0fUpdateDNSRecord\x12%.dns_record.v1.UpdateDNSRecordRequest\x1a&.dns_record.v1.UpdateDNSRecordResponse\"\x00\x12b\n" +
	"\x0fDeleteDNSRecord\x12%.dns_record.v1.DeleteDNSRecordRequest\x1a&.dns_record.v1.DeleteDNSRecordResponse\"\x00B'Z%dnsarc/gen/dns_record/v1;dns_recordv1b\x06proto3"

var (
	file_dns_record_v1_dns_record_proto_rawDescOnce sync.Once
	file_dns_record_v1_dns_record_proto_rawDescData []byte
)

func file_dns_record_v1_dns_record_proto_rawDescGZIP() []byte {
	file_dns_record_v1_dns_record_proto_rawDescOnce.Do(func() {
		file_dns_record_v1_dns_record_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dns_record_v1_dns_record_proto_rawDesc), len(file_dns_record_v1_dns_record_proto_rawDesc)))
	})
	return file_dns_record_v1_dns_record_proto_rawDescData
}

var file_dns_record_v1_dns_record_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_dns_record_v1_dns_record_proto_goTypes = []any{
	(*CreateDNSRecordRequest)(nil),           // 0: dns_record.v1.CreateDNSRecordRequest
	(*DNSRecord)(nil),                        // 1: dns_record.v1.DNSRecord
	(*CreateDNSRecordResponse)(nil),          // 2: dns_record.v1.CreateDNSRecordResponse
	(*ListDNSRecordsRequest)(nil),            // 3: dns_record.v1.ListDNSRecordsRequest
	(*ListDNSRecordsResponse)(nil),           // 4: dns_record.v1.ListDNSRecordsResponse
	(*ListDNSRecordsByZoneNameRequest)(nil),  // 5: dns_record.v1.ListDNSRecordsByZoneNameRequest
	(*ListDNSRecordsByZoneNameResponse)(nil), // 6: dns_record.v1.ListDNSRecordsByZoneNameResponse
	(*GetDNSRecordRequest)(nil),              // 7: dns_record.v1.GetDNSRecordRequest
	(*GetDNSRecordResponse)(nil),             // 8: dns_record.v1.GetDNSRecordResponse
	(*UpdateDNSRecordRequest)(nil),           // 9: dns_record.v1.UpdateDNSRecordRequest
	(*UpdateDNSRecordResponse)(nil),          // 10: dns_record.v1.UpdateDNSRecordResponse
	(*DeleteDNSRecordRequest)(nil),           // 11: dns_record.v1.DeleteDNSRecordRequest
	(*DeleteDNSRecordResponse)(nil),          // 12: dns_record.v1.DeleteDNSRecordResponse
}
var file_dns_record_v1_dns_record_proto_depIdxs = []int32{
	1,  // 0: dns_record.v1.CreateDNSRecordResponse.record:type_name -> dns_record.v1.DNSRecord
	1,  // 1: dns_record.v1.ListDNSRecordsResponse.records:type_name -> dns_record.v1.DNSRecord
	1,  // 2: dns_record.v1.ListDNSRecordsByZoneNameResponse.records:type_name -> dns_record.v1.DNSRecord
	1,  // 3: dns_record.v1.GetDNSRecordResponse.record:type_name -> dns_record.v1.DNSRecord
	1,  // 4: dns_record.v1.UpdateDNSRecordResponse.record:type_name -> dns_record.v1.DNSRecord
	0,  // 5: dns_record.v1.DNSRecordService.CreateDNSRecord:input_type -> dns_record.v1.CreateDNSRecordRequest
	3,  // 6: dns_record.v1.DNSRecordService.ListDNSRecords:input_type -> dns_record.v1.ListDNSRecordsRequest
	5,  // 7: dns_record.v1.DNSRecordService.ListDNSRecordsByZoneName:input_type -> dns_record.v1.ListDNSRecordsByZoneNameRequest
	7,  // 8: dns_record.v1.DNSRecordService.GetDNSRecord:input_type -> dns_record.v1.GetDNSRecordRequest
	9,  // 9: dns_record.v1.DNSRecordService.UpdateDNSRecord:input_type -> dns_record.v1.UpdateDNSRecordRequest
	11, // 10: dns_record.v1.DNSRecordService.DeleteDNSRecord:input_type -> dns_record.v1.DeleteDNSRecordRequest
	2,  // 11: dns_record.v1.DNSRecordService.CreateDNSRecord:output_type -> dns_record.v1.CreateDNSRecordResponse
	4,  // 12: dns_record.v1.DNSRecordService.ListDNSRecords:output_type -> dns_record.v1.ListDNSRecordsResponse
	6,  // 13: dns_record.v1.DNSRecordService.ListDNSRecordsByZoneName:output_type -> dns_record.v1.ListDNSRecordsByZoneNameResponse
	8,  // 14: dns_record.v1.DNSRecordService.GetDNSRecord:output_type -> dns_record.v1.GetDNSRecordResponse
	10, // 15: dns_record.v1.DNSRecordService.UpdateDNSRecord:output_type -> dns_record.v1.UpdateDNSRecordResponse
	12, // 16: dns_record.v1.DNSRecordService.DeleteDNSRecord:output_type -> dns_record.v1.DeleteDNSRecordResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_dns_record_v1_dns_record_proto_init() }
func file_dns_record_v1_dns_record_proto_init() {
	if File_dns_record_v1_dns_record_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dns_record_v1_dns_record_proto_rawDesc), len(file_dns_record_v1_dns_record_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dns_record_v1_dns_record_proto_goTypes,
		DependencyIndexes: file_dns_record_v1_dns_record_proto_depIdxs,
		MessageInfos:      file_dns_record_v1_dns_record_proto_msgTypes,
	}.Build()
	File_dns_record_v1_dns_record_proto = out.File
	file_dns_record_v1_dns_record_proto_goTypes = nil
	file_dns_record_v1_dns_record_proto_depIdxs = nil
}
