// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dns_record/v1/dns_record.proto

package dns_recordv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dnsarc/gen/dns_record/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DNSRecordServiceName is the fully-qualified name of the DNSRecordService service.
	DNSRecordServiceName = "dns_record.v1.DNSRecordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DNSRecordServiceCreateDNSRecordProcedure is the fully-qualified name of the DNSRecordService's
	// CreateDNSRecord RPC.
	DNSRecordServiceCreateDNSRecordProcedure = "/dns_record.v1.DNSRecordService/CreateDNSRecord"
	// DNSRecordServiceListDNSRecordsProcedure is the fully-qualified name of the DNSRecordService's
	// ListDNSRecords RPC.
	DNSRecordServiceListDNSRecordsProcedure = "/dns_record.v1.DNSRecordService/ListDNSRecords"
	// DNSRecordServiceListDNSRecordsByZoneNameProcedure is the fully-qualified name of the
	// DNSRecordService's ListDNSRecordsByZoneName RPC.
	DNSRecordServiceListDNSRecordsByZoneNameProcedure = "/dns_record.v1.DNSRecordService/ListDNSRecordsByZoneName"
	// DNSRecordServiceGetDNSRecordProcedure is the fully-qualified name of the DNSRecordService's
	// GetDNSRecord RPC.
	DNSRecordServiceGetDNSRecordProcedure = "/dns_record.v1.DNSRecordService/GetDNSRecord"
	// DNSRecordServiceUpdateDNSRecordProcedure is the fully-qualified name of the DNSRecordService's
	// UpdateDNSRecord RPC.
	DNSRecordServiceUpdateDNSRecordProcedure = "/dns_record.v1.DNSRecordService/UpdateDNSRecord"
	// DNSRecordServiceDeleteDNSRecordProcedure is the fully-qualified name of the DNSRecordService's
	// DeleteDNSRecord RPC.
	DNSRecordServiceDeleteDNSRecordProcedure = "/dns_record.v1.DNSRecordService/DeleteDNSRecord"
)

// DNSRecordServiceClient is a client for the dns_record.v1.DNSRecordService service.
type DNSRecordServiceClient interface {
	CreateDNSRecord(context.Context, *connect.Request[v1.CreateDNSRecordRequest]) (*connect.Response[v1.CreateDNSRecordResponse], error)
	ListDNSRecords(context.Context, *connect.Request[v1.ListDNSRecordsRequest]) (*connect.Response[v1.ListDNSRecordsResponse], error)
	ListDNSRecordsByZoneName(context.Context, *connect.Request[v1.ListDNSRecordsByZoneNameRequest]) (*connect.Response[v1.ListDNSRecordsByZoneNameResponse], error)
	GetDNSRecord(context.Context, *connect.Request[v1.GetDNSRecordRequest]) (*connect.Response[v1.GetDNSRecordResponse], error)
	UpdateDNSRecord(context.Context, *connect.Request[v1.UpdateDNSRecordRequest]) (*connect.Response[v1.UpdateDNSRecordResponse], error)
	DeleteDNSRecord(context.Context, *connect.Request[v1.DeleteDNSRecordRequest]) (*connect.Response[v1.DeleteDNSRecordResponse], error)
}

// NewDNSRecordServiceClient constructs a client for the dns_record.v1.DNSRecordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDNSRecordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DNSRecordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dNSRecordServiceMethods := v1.File_dns_record_v1_dns_record_proto.Services().ByName("DNSRecordService").Methods()
	return &dNSRecordServiceClient{
		createDNSRecord: connect.NewClient[v1.CreateDNSRecordRequest, v1.CreateDNSRecordResponse](
			httpClient,
			baseURL+DNSRecordServiceCreateDNSRecordProcedure,
			connect.WithSchema(dNSRecordServiceMethods.ByName("CreateDNSRecord")),
			connect.WithClientOptions(opts...),
		),
		listDNSRecords: connect.NewClient[v1.ListDNSRecordsRequest, v1.ListDNSRecordsResponse](
			httpClient,
			baseURL+DNSRecordServiceListDNSRecordsProcedure,
			connect.WithSchema(dNSRecordServiceMethods.ByName("ListDNSRecords")),
			connect.WithClientOptions(opts...),
		),
		listDNSRecordsByZoneName: connect.NewClient[v1.ListDNSRecordsByZoneNameRequest, v1.ListDNSRecordsByZoneNameResponse](
			httpClient,
			baseURL+DNSRecordServiceListDNSRecordsByZoneNameProcedure,
			connect.WithSchema(dNSRecordServiceMethods.ByName("ListDNSRecordsByZoneName")),
			connect.WithClientOptions(opts...),
		),
		getDNSRecord: connect.NewClient[v1.GetDNSRecordRequest, v1.GetDNSRecordResponse](
			httpClient,
			baseURL+DNSRecordServiceGetDNSRecordProcedure,
			connect.WithSchema(dNSRecordServiceMethods.ByName("GetDNSRecord")),
			connect.WithClientOptions(opts...),
		),
		updateDNSRecord: connect.NewClient[v1.UpdateDNSRecordRequest, v1.UpdateDNSRecordResponse](
			httpClient,
			baseURL+DNSRecordServiceUpdateDNSRecordProcedure,
			connect.WithSchema(dNSRecordServiceMethods.ByName("UpdateDNSRecord")),
			connect.WithClientOptions(opts...),
		),
		deleteDNSRecord: connect.NewClient[v1.DeleteDNSRecordRequest, v1.DeleteDNSRecordResponse](
			httpClient,
			baseURL+DNSRecordServiceDeleteDNSRecordProcedure,
			connect.WithSchema(dNSRecordServiceMethods.ByName("DeleteDNSRecord")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dNSRecordServiceClient implements DNSRecordServiceClient.
type dNSRecordServiceClient struct {
	createDNSRecord          *connect.Client[v1.CreateDNSRecordRequest, v1.CreateDNSRecordResponse]
	listDNSRecords           *connect.Client[v1.ListDNSRecordsRequest, v1.ListDNSRecordsResponse]
	listDNSRecordsByZoneName *connect.Client[v1.ListDNSRecordsByZoneNameRequest, v1.ListDNSRecordsByZoneNameResponse]
	getDNSRecord             *connect.Client[v1.GetDNSRecordRequest, v1.GetDNSRecordResponse]
	updateDNSRecord          *connect.Client[v1.UpdateDNSRecordRequest, v1.UpdateDNSRecordResponse]
	deleteDNSRecord          *connect.Client[v1.DeleteDNSRecordRequest, v1.DeleteDNSRecordResponse]
}

// CreateDNSRecord calls dns_record.v1.DNSRecordService.CreateDNSRecord.
func (c *dNSRecordServiceClient) CreateDNSRecord(ctx context.Context, req *connect.Request[v1.CreateDNSRecordRequest]) (*connect.Response[v1.CreateDNSRecordResponse], error) {
	return c.createDNSRecord.CallUnary(ctx, req)
}

// ListDNSRecords calls dns_record.v1.DNSRecordService.ListDNSRecords.
func (c *dNSRecordServiceClient) ListDNSRecords(ctx context.Context, req *connect.Request[v1.ListDNSRecordsRequest]) (*connect.Response[v1.ListDNSRecordsResponse], error) {
	return c.listDNSRecords.CallUnary(ctx, req)
}

// ListDNSRecordsByZoneName calls dns_record.v1.DNSRecordService.ListDNSRecordsByZoneName.
func (c *dNSRecordServiceClient) ListDNSRecordsByZoneName(ctx context.Context, req *connect.Request[v1.ListDNSRecordsByZoneNameRequest]) (*connect.Response[v1.ListDNSRecordsByZoneNameResponse], error) {
	return c.listDNSRecordsByZoneName.CallUnary(ctx, req)
}

// GetDNSRecord calls dns_record.v1.DNSRecordService.GetDNSRecord.
func (c *dNSRecordServiceClient) GetDNSRecord(ctx context.Context, req *connect.Request[v1.GetDNSRecordRequest]) (*connect.Response[v1.GetDNSRecordResponse], error) {
	return c.getDNSRecord.CallUnary(ctx, req)
}

// UpdateDNSRecord calls dns_record.v1.DNSRecordService.UpdateDNSRecord.
func (c *dNSRecordServiceClient) UpdateDNSRecord(ctx context.Context, req *connect.Request[v1.UpdateDNSRecordRequest]) (*connect.Response[v1.UpdateDNSRecordResponse], error) {
	return c.updateDNSRecord.CallUnary(ctx, req)
}

// DeleteDNSRecord calls dns_record.v1.DNSRecordService.DeleteDNSRecord.
func (c *dNSRecordServiceClient) DeleteDNSRecord(ctx context.Context, req *connect.Request[v1.DeleteDNSRecordRequest]) (*connect.Response[v1.DeleteDNSRecordResponse], error) {
	return c.deleteDNSRecord.CallUnary(ctx, req)
}

// DNSRecordServiceHandler is an implementation of the dns_record.v1.DNSRecordService service.
type DNSRecordServiceHandler interface {
	CreateDNSRecord(context.Context, *connect.Request[v1.CreateDNSRecordRequest]) (*connect.Response[v1.CreateDNSRecordResponse], error)
	ListDNSRecords(context.Context, *connect.Request[v1.ListDNSRecordsRequest]) (*connect.Response[v1.ListDNSRecordsResponse], error)
	ListDNSRecordsByZoneName(context.Context, *connect.Request[v1.ListDNSRecordsByZoneNameRequest]) (*connect.Response[v1.ListDNSRecordsByZoneNameResponse], error)
	GetDNSRecord(context.Context, *connect.Request[v1.GetDNSRecordRequest]) (*connect.Response[v1.GetDNSRecordResponse], error)
	UpdateDNSRecord(context.Context, *connect.Request[v1.UpdateDNSRecordRequest]) (*connect.Response[v1.UpdateDNSRecordResponse], error)
	DeleteDNSRecord(context.Context, *connect.Request[v1.DeleteDNSRecordRequest]) (*connect.Response[v1.DeleteDNSRecordResponse], error)
}

// NewDNSRecordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDNSRecordServiceHandler(svc DNSRecordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dNSRecordServiceMethods := v1.File_dns_record_v1_dns_record_proto.Services().ByName("DNSRecordService").Methods()
	dNSRecordServiceCreateDNSRecordHandler := connect.NewUnaryHandler(
		DNSRecordServiceCreateDNSRecordProcedure,
		svc.CreateDNSRecord,
		connect.WithSchema(dNSRecordServiceMethods.ByName("CreateDNSRecord")),
		connect.WithHandlerOptions(opts...),
	)
	dNSRecordServiceListDNSRecordsHandler := connect.NewUnaryHandler(
		DNSRecordServiceListDNSRecordsProcedure,
		svc.ListDNSRecords,
		connect.WithSchema(dNSRecordServiceMethods.ByName("ListDNSRecords")),
		connect.WithHandlerOptions(opts...),
	)
	dNSRecordServiceListDNSRecordsByZoneNameHandler := connect.NewUnaryHandler(
		DNSRecordServiceListDNSRecordsByZoneNameProcedure,
		svc.ListDNSRecordsByZoneName,
		connect.WithSchema(dNSRecordServiceMethods.ByName("ListDNSRecordsByZoneName")),
		connect.WithHandlerOptions(opts...),
	)
	dNSRecordServiceGetDNSRecordHandler := connect.NewUnaryHandler(
		DNSRecordServiceGetDNSRecordProcedure,
		svc.GetDNSRecord,
		connect.WithSchema(dNSRecordServiceMethods.ByName("GetDNSRecord")),
		connect.WithHandlerOptions(opts...),
	)
	dNSRecordServiceUpdateDNSRecordHandler := connect.NewUnaryHandler(
		DNSRecordServiceUpdateDNSRecordProcedure,
		svc.UpdateDNSRecord,
		connect.WithSchema(dNSRecordServiceMethods.ByName("UpdateDNSRecord")),
		connect.WithHandlerOptions(opts...),
	)
	dNSRecordServiceDeleteDNSRecordHandler := connect.NewUnaryHandler(
		DNSRecordServiceDeleteDNSRecordProcedure,
		svc.DeleteDNSRecord,
		connect.WithSchema(dNSRecordServiceMethods.ByName("DeleteDNSRecord")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dns_record.v1.DNSRecordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DNSRecordServiceCreateDNSRecordProcedure:
			dNSRecordServiceCreateDNSRecordHandler.ServeHTTP(w, r)
		case DNSRecordServiceListDNSRecordsProcedure:
			dNSRecordServiceListDNSRecordsHandler.ServeHTTP(w, r)
		case DNSRecordServiceListDNSRecordsByZoneNameProcedure:
			dNSRecordServiceListDNSRecordsByZoneNameHandler.ServeHTTP(w, r)
		case DNSRecordServiceGetDNSRecordProcedure:
			dNSRecordServiceGetDNSRecordHandler.ServeHTTP(w, r)
		case DNSRecordServiceUpdateDNSRecordProcedure:
			dNSRecordServiceUpdateDNSRecordHandler.ServeHTTP(w, r)
		case DNSRecordServiceDeleteDNSRecordProcedure:
			dNSRecordServiceDeleteDNSRecordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDNSRecordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDNSRecordServiceHandler struct{}

func (UnimplementedDNSRecordServiceHandler) CreateDNSRecord(context.Context, *connect.Request[v1.CreateDNSRecordRequest]) (*connect.Response[v1.CreateDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dns_record.v1.DNSRecordService.CreateDNSRecord is not implemented"))
}

func (UnimplementedDNSRecordServiceHandler) ListDNSRecords(context.Context, *connect.Request[v1.ListDNSRecordsRequest]) (*connect.Response[v1.ListDNSRecordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dns_record.v1.DNSRecordService.ListDNSRecords is not implemented"))
}

func (UnimplementedDNSRecordServiceHandler) ListDNSRecordsByZoneName(context.Context, *connect.Request[v1.ListDNSRecordsByZoneNameRequest]) (*connect.Response[v1.ListDNSRecordsByZoneNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dns_record.v1.DNSRecordService.ListDNSRecordsByZoneName is not implemented"))
}

func (UnimplementedDNSRecordServiceHandler) GetDNSRecord(context.Context, *connect.Request[v1.GetDNSRecordRequest]) (*connect.Response[v1.GetDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dns_record.v1.DNSRecordService.GetDNSRecord is not implemented"))
}

func (UnimplementedDNSRecordServiceHandler) UpdateDNSRecord(context.Context, *connect.Request[v1.UpdateDNSRecordRequest]) (*connect.Response[v1.UpdateDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dns_record.v1.DNSRecordService.UpdateDNSRecord is not implemented"))
}

func (UnimplementedDNSRecordServiceHandler) DeleteDNSRecord(context.Context, *connect.Request[v1.DeleteDNSRecordRequest]) (*connect.Response[v1.DeleteDNSRecordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dns_record.v1.DNSRecordService.DeleteDNSRecord is not implemented"))
}
