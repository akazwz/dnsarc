// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dnsarc/gen/auth/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceGoogleLoginURLProcedure is the fully-qualified name of the AuthService's
	// GoogleLoginURL RPC.
	AuthServiceGoogleLoginURLProcedure = "/auth.v1.AuthService/GoogleLoginURL"
	// AuthServiceWhoAmIProcedure is the fully-qualified name of the AuthService's WhoAmI RPC.
	AuthServiceWhoAmIProcedure = "/auth.v1.AuthService/WhoAmI"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	GoogleLoginURL(context.Context, *connect.Request[v1.GoogleLoginURLRequest]) (*connect.Response[v1.GoogleLoginURLResponse], error)
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		googleLoginURL: connect.NewClient[v1.GoogleLoginURLRequest, v1.GoogleLoginURLResponse](
			httpClient,
			baseURL+AuthServiceGoogleLoginURLProcedure,
			connect.WithSchema(authServiceMethods.ByName("GoogleLoginURL")),
			connect.WithClientOptions(opts...),
		),
		whoAmI: connect.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+AuthServiceWhoAmIProcedure,
			connect.WithSchema(authServiceMethods.ByName("WhoAmI")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	googleLoginURL *connect.Client[v1.GoogleLoginURLRequest, v1.GoogleLoginURLResponse]
	whoAmI         *connect.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
}

// GoogleLoginURL calls auth.v1.AuthService.GoogleLoginURL.
func (c *authServiceClient) GoogleLoginURL(ctx context.Context, req *connect.Request[v1.GoogleLoginURLRequest]) (*connect.Response[v1.GoogleLoginURLResponse], error) {
	return c.googleLoginURL.CallUnary(ctx, req)
}

// WhoAmI calls auth.v1.AuthService.WhoAmI.
func (c *authServiceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	GoogleLoginURL(context.Context, *connect.Request[v1.GoogleLoginURLRequest]) (*connect.Response[v1.GoogleLoginURLResponse], error)
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceGoogleLoginURLHandler := connect.NewUnaryHandler(
		AuthServiceGoogleLoginURLProcedure,
		svc.GoogleLoginURL,
		connect.WithSchema(authServiceMethods.ByName("GoogleLoginURL")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceWhoAmIHandler := connect.NewUnaryHandler(
		AuthServiceWhoAmIProcedure,
		svc.WhoAmI,
		connect.WithSchema(authServiceMethods.ByName("WhoAmI")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceGoogleLoginURLProcedure:
			authServiceGoogleLoginURLHandler.ServeHTTP(w, r)
		case AuthServiceWhoAmIProcedure:
			authServiceWhoAmIHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) GoogleLoginURL(context.Context, *connect.Request[v1.GoogleLoginURLRequest]) (*connect.Response[v1.GoogleLoginURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GoogleLoginURL is not implemented"))
}

func (UnimplementedAuthServiceHandler) WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.WhoAmI is not implemented"))
}
