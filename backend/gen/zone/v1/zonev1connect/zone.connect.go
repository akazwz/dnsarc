// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zone/v1/zone.proto

package zonev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dnsarc/gen/zone/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ZoneServiceName is the fully-qualified name of the ZoneService service.
	ZoneServiceName = "zone.v1.ZoneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ZoneServiceCreateZoneProcedure is the fully-qualified name of the ZoneService's CreateZone RPC.
	ZoneServiceCreateZoneProcedure = "/zone.v1.ZoneService/CreateZone"
	// ZoneServiceListZonesProcedure is the fully-qualified name of the ZoneService's ListZones RPC.
	ZoneServiceListZonesProcedure = "/zone.v1.ZoneService/ListZones"
	// ZoneServiceGetZoneProcedure is the fully-qualified name of the ZoneService's GetZone RPC.
	ZoneServiceGetZoneProcedure = "/zone.v1.ZoneService/GetZone"
	// ZoneServiceGetZoneByNameProcedure is the fully-qualified name of the ZoneService's GetZoneByName
	// RPC.
	ZoneServiceGetZoneByNameProcedure = "/zone.v1.ZoneService/GetZoneByName"
	// ZoneServiceDeleteZoneProcedure is the fully-qualified name of the ZoneService's DeleteZone RPC.
	ZoneServiceDeleteZoneProcedure = "/zone.v1.ZoneService/DeleteZone"
)

// ZoneServiceClient is a client for the zone.v1.ZoneService service.
type ZoneServiceClient interface {
	CreateZone(context.Context, *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error)
	ListZones(context.Context, *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error)
	GetZone(context.Context, *connect.Request[v1.GetZoneRequest]) (*connect.Response[v1.GetZoneResponse], error)
	GetZoneByName(context.Context, *connect.Request[v1.GetZoneByNameRequest]) (*connect.Response[v1.GetZoneByNameResponse], error)
	DeleteZone(context.Context, *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error)
}

// NewZoneServiceClient constructs a client for the zone.v1.ZoneService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZoneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ZoneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	zoneServiceMethods := v1.File_zone_v1_zone_proto.Services().ByName("ZoneService").Methods()
	return &zoneServiceClient{
		createZone: connect.NewClient[v1.CreateZoneRequest, v1.CreateZoneResponse](
			httpClient,
			baseURL+ZoneServiceCreateZoneProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("CreateZone")),
			connect.WithClientOptions(opts...),
		),
		listZones: connect.NewClient[v1.ListZonesRequest, v1.ListZonesResponse](
			httpClient,
			baseURL+ZoneServiceListZonesProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("ListZones")),
			connect.WithClientOptions(opts...),
		),
		getZone: connect.NewClient[v1.GetZoneRequest, v1.GetZoneResponse](
			httpClient,
			baseURL+ZoneServiceGetZoneProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("GetZone")),
			connect.WithClientOptions(opts...),
		),
		getZoneByName: connect.NewClient[v1.GetZoneByNameRequest, v1.GetZoneByNameResponse](
			httpClient,
			baseURL+ZoneServiceGetZoneByNameProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("GetZoneByName")),
			connect.WithClientOptions(opts...),
		),
		deleteZone: connect.NewClient[v1.DeleteZoneRequest, v1.DeleteZoneResponse](
			httpClient,
			baseURL+ZoneServiceDeleteZoneProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("DeleteZone")),
			connect.WithClientOptions(opts...),
		),
	}
}

// zoneServiceClient implements ZoneServiceClient.
type zoneServiceClient struct {
	createZone    *connect.Client[v1.CreateZoneRequest, v1.CreateZoneResponse]
	listZones     *connect.Client[v1.ListZonesRequest, v1.ListZonesResponse]
	getZone       *connect.Client[v1.GetZoneRequest, v1.GetZoneResponse]
	getZoneByName *connect.Client[v1.GetZoneByNameRequest, v1.GetZoneByNameResponse]
	deleteZone    *connect.Client[v1.DeleteZoneRequest, v1.DeleteZoneResponse]
}

// CreateZone calls zone.v1.ZoneService.CreateZone.
func (c *zoneServiceClient) CreateZone(ctx context.Context, req *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error) {
	return c.createZone.CallUnary(ctx, req)
}

// ListZones calls zone.v1.ZoneService.ListZones.
func (c *zoneServiceClient) ListZones(ctx context.Context, req *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error) {
	return c.listZones.CallUnary(ctx, req)
}

// GetZone calls zone.v1.ZoneService.GetZone.
func (c *zoneServiceClient) GetZone(ctx context.Context, req *connect.Request[v1.GetZoneRequest]) (*connect.Response[v1.GetZoneResponse], error) {
	return c.getZone.CallUnary(ctx, req)
}

// GetZoneByName calls zone.v1.ZoneService.GetZoneByName.
func (c *zoneServiceClient) GetZoneByName(ctx context.Context, req *connect.Request[v1.GetZoneByNameRequest]) (*connect.Response[v1.GetZoneByNameResponse], error) {
	return c.getZoneByName.CallUnary(ctx, req)
}

// DeleteZone calls zone.v1.ZoneService.DeleteZone.
func (c *zoneServiceClient) DeleteZone(ctx context.Context, req *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error) {
	return c.deleteZone.CallUnary(ctx, req)
}

// ZoneServiceHandler is an implementation of the zone.v1.ZoneService service.
type ZoneServiceHandler interface {
	CreateZone(context.Context, *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error)
	ListZones(context.Context, *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error)
	GetZone(context.Context, *connect.Request[v1.GetZoneRequest]) (*connect.Response[v1.GetZoneResponse], error)
	GetZoneByName(context.Context, *connect.Request[v1.GetZoneByNameRequest]) (*connect.Response[v1.GetZoneByNameResponse], error)
	DeleteZone(context.Context, *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error)
}

// NewZoneServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZoneServiceHandler(svc ZoneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	zoneServiceMethods := v1.File_zone_v1_zone_proto.Services().ByName("ZoneService").Methods()
	zoneServiceCreateZoneHandler := connect.NewUnaryHandler(
		ZoneServiceCreateZoneProcedure,
		svc.CreateZone,
		connect.WithSchema(zoneServiceMethods.ByName("CreateZone")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceListZonesHandler := connect.NewUnaryHandler(
		ZoneServiceListZonesProcedure,
		svc.ListZones,
		connect.WithSchema(zoneServiceMethods.ByName("ListZones")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceGetZoneHandler := connect.NewUnaryHandler(
		ZoneServiceGetZoneProcedure,
		svc.GetZone,
		connect.WithSchema(zoneServiceMethods.ByName("GetZone")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceGetZoneByNameHandler := connect.NewUnaryHandler(
		ZoneServiceGetZoneByNameProcedure,
		svc.GetZoneByName,
		connect.WithSchema(zoneServiceMethods.ByName("GetZoneByName")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceDeleteZoneHandler := connect.NewUnaryHandler(
		ZoneServiceDeleteZoneProcedure,
		svc.DeleteZone,
		connect.WithSchema(zoneServiceMethods.ByName("DeleteZone")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zone.v1.ZoneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ZoneServiceCreateZoneProcedure:
			zoneServiceCreateZoneHandler.ServeHTTP(w, r)
		case ZoneServiceListZonesProcedure:
			zoneServiceListZonesHandler.ServeHTTP(w, r)
		case ZoneServiceGetZoneProcedure:
			zoneServiceGetZoneHandler.ServeHTTP(w, r)
		case ZoneServiceGetZoneByNameProcedure:
			zoneServiceGetZoneByNameHandler.ServeHTTP(w, r)
		case ZoneServiceDeleteZoneProcedure:
			zoneServiceDeleteZoneHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedZoneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZoneServiceHandler struct{}

func (UnimplementedZoneServiceHandler) CreateZone(context.Context, *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zone.v1.ZoneService.CreateZone is not implemented"))
}

func (UnimplementedZoneServiceHandler) ListZones(context.Context, *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zone.v1.ZoneService.ListZones is not implemented"))
}

func (UnimplementedZoneServiceHandler) GetZone(context.Context, *connect.Request[v1.GetZoneRequest]) (*connect.Response[v1.GetZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zone.v1.ZoneService.GetZone is not implemented"))
}

func (UnimplementedZoneServiceHandler) GetZoneByName(context.Context, *connect.Request[v1.GetZoneByNameRequest]) (*connect.Response[v1.GetZoneByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zone.v1.ZoneService.GetZoneByName is not implemented"))
}

func (UnimplementedZoneServiceHandler) DeleteZone(context.Context, *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zone.v1.ZoneService.DeleteZone is not implemented"))
}
